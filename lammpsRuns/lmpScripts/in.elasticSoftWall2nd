# Compute elastic constant tensor for a crystal
#
# Written by Aidan Thompson (Sandia, athomps@sandia.gov)
#
#  This script uses the following three include files.
#
#   init.mod      (must be modified for different crystal structures)
# 	       	  Define units, deformation parameters and initial
#		  configuration of the atoms and simulation cell.  
#
#
#   potential.mod    (must be modified for different pair styles)
# 		     Define pair style and other attributes 
#		     not stored in restart file
#
#
#   displaceSoftWall.mod    (displaceSoftWall.mod should not need to be modified)
# 		    Perform positive and negative box displacements 
# 		    in direction ${dir} and size ${up}. 
# 		    It uses the resultant changes 
#		    in stress to compute one
# 		    row of the elastic stiffness tensor
#		    
#		    Inputs variables:
#		    	   dir = the Voigt deformation component 
#		    		    (1,2,3,4,5,6)  
#		    Global constants:
#       	    	   up = the deformation magnitude (strain units)
#       		   cfac = conversion from LAMMPS pressure units to 
#               	   output units for elastic constants 
#
#
#  To run this on a different system, it should only be necessary to 
#  modify the files init.mod and potential.mod. In order to calculate
#  the elastic constants correctly, care must be taken to specify
#  the correct units in init.mod (units, cfac and cunits). It is also
#  important to verify that the minimization of energy w.r.t atom
#  positions in the deformed cell is fully converged.
#  One indication of this is that the elastic constants are insensitive
#  to the choice of the variable ${up} in init.mod. Another is to check
#  the final max and two-norm forces reported in the log file. If you know
#  that minimization is not required, you can set maxiter = 0.0 in 
#  init.mod. 
#

#--- include files
include ${INC}/initSoftWall.mod
include ${INC}/CreateBox.mod
include ${INC}/potential.mod
#include ScriptGroup.0.txt

# Compute initial state
minimize ${etol} ${ftol} ${maxiter} ${maxeval} #--- initial state is already in equilibrium!

#--- stress loop
#variable	ncc		equal	${ncel}-1
#variable 	icel 	loop 0	${ncc}
#	label loop
	#
#	group	freeGr	delete
#	group	frozGr	delete
#	include ScriptGroup.${icel}.txt
	#
#	include	${INC}/CompStrs0.mod #--- initial stress
	include	${INC}/CompStrs02nd.mod #--- initial stress
#	variable xx	equal	v_sxx0_${icel}
#	print "${icel} ${xx}" append "p_init.txt"
#next 	icel
#jump	in.elasticSoftWall2nd  loop

#--- store initial stress
thermo_style	custom	step	v_sxx0_0  #v_pxx0	pxx v_press
run	0
#--- end of loop
#
